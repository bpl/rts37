===============
ENGINE PLANNING
===============

This document contains the current plan regarding how the engine should work.

----------
Game setup
----------

Sample communication of how the game should start:

# The client establishes a WebSocket connection to the game server with the
# following parameters:
# - player: The identification code of the player
# - game: The identification code of the game
# - random: A random string to make the data unguessable
# - mac: Message authentication code that proves who the user is

# The server responds with a server hello

SERVER> 1,"hello"

# The client tells the server that the client is ready to receive the initial game
# state. From the server's perspective initial game state is not much different from
# backlogged messages.

CLIENT> 1,"ack",0,0

# The server tells the client which map to use

SERVER> 2,"loadMap","http://localhost:8000/fs/maps/map.js"

# The server tells the client who the players are

SERVER> 3,"AC",{"$type": "Commander", "id": 1, "playerId": "tim", "color": "#ff0000"}
SERVER> 4,"AC",{"$type": "Commander", "id": 2, "playerId": "tom", "color": "#0000ff"}
SERVER> 5,"youAre",1

# The client tells the server that it has loaded the map

CLIENT> 1,"mapDone"

# The server starts the game

SERVER> 6,"gameStart"

# The server notifies that a tick has completed from its point of view

SERVER> 7,"tick",0

# The client notifies that it wishes to send a command

CLIENT> 2{"$": "construct", "what": "PowerPlant"}

# The server echoes the command back to all clients

SERVER> 8,"C",1,{"$": "construct", "what": "PowerPlant"}

# The server notifies again that a tick has completed

SERVER> 9,"tick",1

-----------------
Message type list
-----------------

The wire format can be easily decoded just by using the following code:

JSON.parse('{"d":[' + msg + ']}')['d']

In a server-to-client message, the first item is the tag of the message and the
second item is the type of the command.

In a client-to-server message, the first item is the category of the message. It is
one of the following values:

1: Message
2: Command issuance

SERVER>

"hello"
Notifies the client that the connection has been established.

"loadMap",src(string)
Tells the client to load a map from the specified source URL.

"loadAsset",src(string)
Tells the client to load a game asset from the specified source URL.

"AC",{$type: string, id: integer, ...}
Tells the client to create an actor with the specified parameters and add it to the
game.

"youAre",actor(number)
Tells the client the id of the actor that represents the player the client is
associated with.

"gameStart"
Notifies the client that the game has started.

"tick",tick(integer)
Notifies the client that a tick has completed.

"error",{msg: string, [...]}
Notifies the client that an error has occurred.

"C",player(number),command(object)
Server-to-client command broadcast

CLIENT>

"ack",tag(integer),tick(integer)
Acknowledges the receipt of message(s) and processing of tick(s). Parameter tag is
the message tag of the last server message received, or 0 when no messages have been
received yet. Parameter tick is the tick number of the last tick processed, or 0
when no ticks have been processed yet. The client MUST send an "ack" message as the
first message after having received the server hello.

"mapReady"
Notifies the server that the client has successfully loaded the map as instructed by
the server.

"assetReady",done(integer),known(integer)
Notifies the server that the client has successfully loaded "done" number of game
assets out of "known" number of game assets the server has instructed the client to
load so far.

"TC",tick(integer)
Notifies the client that a tick has been successfully processed.