===============
ENGINE PLANNING
===============

This document contains the current plan regarding how the engine should work.

!! OBSOLETE !!

----------
Game setup
----------

Sample communication of how the game should start:

# The client establishes a WebSocket connection to the game server with the
# following parameters:
# - player: The identification code of the player
# - game: The identification code of the game
# - random: A random string to make the data unguessable
# - mac: Message authentication code that proves who the user is

# The server and client both send a recap request / hello

SERVER> -1,0

CLIENT> -1,0

# The client tells the server that the client is ready to receive the initial
# game state. (FIXME: Outdated?)

CLIENT> 1,0,"ack",0

# The server tells the client the scenario and who the player is

SERVER> 1,1,"scenario",1,{
	"scenarioLocation": "http://localhost:8000/fs/scenario.json",
	"scenarioName": "#multiplayer",
	"players": [
		{
			"publicId": 1,
			"color": "#ff0000"
		},
		{
			"publicId": 2,
			"color": "#0000ff"
		}
	]
}

# The client tells the server that it has loaded all the resources

CLIENT> 1,1,"assetReady",6,6,true

# The server starts the game

SERVER> 2,1,"gameStart"

# The server notifies that a tick has completed from its point of view

SERVER> 3,1,"tick",0

# The client notifies that it wishes to send a command

CLIENT> 2,3,{"$": "construct", "what": "PowerPlant"}

# The server echoes the command back to all clients

SERVER> 4,2,"C",1,{"$": "construct", "what": "PowerPlant"}

# The server notifies again that a tick has completed

SERVER> 5,2,"tick",1

-----------------
Message type list
-----------------

The wire format can be easily decoded just by using the following code:

JSON.parse('{"d":[' + msg + ']}')['d']

In a server-to-client message, the first item is the tag of the message and the
second item is the type of the command.

In a client-to-server message, the first item is the category of the message. It is
one of the following values:

1: Message
2: Command issuance

SERVER>

"scenario",player(number),scenario(object)
Tells the client the actor ID of the player object of the local player and the
base scenario for this game (see below).

"gameStart"
Notifies the client that the game has started.

"tick",tick(integer)
Notifies the client that a tick has completed.

"error",{msg: string, [...]}
Notifies the client that an error has occurred.

"C",player(number),command(object)
Server-to-client command broadcast

CLIENT>

"ack",tick(integer)
Acknowledges processing of tick(s). Parameter tick is the tick number of the
last tick processed, or 0 when no ticks have been processed yet. The client MUST
send an "ack" message as the first message after having received the server
hello. (FIXME: Is this outdated?)

"assetReady",done(integer),known(integer),everythingDone(boolean)
Notifies the server that the client has successfully loaded "done" number of game
assets out of "known" number of game assets the server has instructed the client to
load so far.

-----------------------
Scenario message format
-----------------------

{
	// The URL or a RequireJS location from which the scenario document is loaded from
	"scenarioLocation": "location",
	// The name of a scenario inside the scenario file
	"scenarioName": "#reference",
	// Players participating in this game
	"players": [
		{
			// Public ID of this player
			"publicId": 0,
			// Player color of this player
			"color": "#ff0000"
		}
	]
}